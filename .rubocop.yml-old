# require:
#   - rubocop

# We want some defaults merged instead of overwriting them.
inherit_mode:
  merge:
    - Exclude # for all cops
    - AllowedNames # for Naming/Uncommunicative* cops
    - IgnoredMethods # for Style/SymbolProc

AllCops:
  TargetRubyVersion: 2.7
  NewCops: enable
  SuggestExtensions: false
  Exclude:
    - bin/*
    - notes/**/*
    - db/schema.rb
    - docs/**/*
    - config/environments/development.rb
    - node_modules/**/*
    - vendor/**/*

Bundler:
  Enabled: true

# We want to allow this layout:
#
# foo :arg1,
#   opt1: :hello,
#   opt2: :world
Layout/ArgumentAlignment:
  Enabled: false

# Sometimes you may legitimately want to stick a comment in a weird place.
# For example:
#
# entries
#   .transformation1 { … } # Explanation of this transformation might span
#                          # 2 lines and we don't want this line unindented.
#   .transformation2 { … }
#   .transformation3
Layout/CommentIndentation:
  Enabled: false

# We want to leave it up to the programmer to judge the readability of an empty
# line after a guard clause. E.g. adding an empty line in 2-line method may only
# result in a cognitive stumble in the flow of code.
#
# Example:
#
#     def validate_user(user)
#       return false if user.nil?
#       user.valid?
#     end
Layout/EmptyLineAfterGuardClause:
  Enabled: false

# Leaving this up to the programmer's judgement call on a case by case basis.
Layout/EmptyLineAfterMagicComment:
  Enabled: false

# Sometimes one-line methods formatted as a table can flow nicely when read.
#
# Example:
#
#     def jfk; @jfk ||= create_airport('JFK', 'New York') end
#     def svo; @svo ||= create_airport('SVO', 'Moscow')   end
#     def nbo; @nbo ||= create_airport('NBO', 'Nairobi')  end
#     def sgn; @sgn ||= create_airport('SGN', 'Saigon')   end
Layout/EmptyLineBetweenDefs:
  AllowAdjacentOneLineDefs: true

# We want to allow for long, descriptive constructors with comments.
#
# Example:
#
#     def initialize \
#       foo:,
#
#       # filters
#       bar:,
#       baz:,
#
#       # config
#       some:,
#       more:,
#       args:,
Layout/EmptyLinesAroundArguments:
  Enabled: false

# Leaving empty lines is a judgement call on readability that should be left up
# to the programmer.
Layout/EmptyLinesAroundBlockBody:
  Enabled: false

# This doesn't like vertical aligning single-line method calls.
Layout/ExtraSpacing:
  Enabled: false

Layout/FirstArrayElementIndentation:
  EnforcedStyle: consistent

Layout/FirstHashElementIndentation:
  EnforcedStyle: consistent

# We want to leave it up to the programmer what is the most reasonable literal
# hash representation in a specific case.
Layout/HashAlignment:
  Enabled: false

# No need to keep chasing and fixing autogenerated files, as well as splitting
# urls in route configs.
Layout/LineLength:
  Max: 80
  Exclude:
    - config/application.rb
    - config/environments/*.rb
    - config/initializers/active_admin.rb
    - config/initializers/assets.rb
    - config/initializers/backtrace_silencers.rb
    - config/initializers/devise.rb
    - config/initializers/new_framework_defaults.rb
    - config/initializers/wrap_parameters.rb
    - config/routes.rb
    - config/routes/deal_page_redirects.rb
    - config/routes/missing_content_redirects.rb
    - spec/spec_helper.rb

# Sometimes you want to indent certain methods in multiline chain for extra
# meaning.
# Example:
#
#     expect { subject }
#       .to change { user.reload.subscription.aasm_state }
#         .from('canceled').to('incomplete')
#       .and change { user.default_payment_method }
#         .from(nil).to(a_kind_of(PaymentMethod))
#       .and change { user.subscriber.attributes }
Layout/MultilineMethodCallIndentation:
  Enabled: false

# We want to allow this layout:
#
# foo :arg1,
#   opt1: :hello,
#   opt2: :world
Layout/ParameterAlignment:
  Enabled: false

# Sometimes readability suffers when array space is removed.
Layout/SpaceInsideArrayLiteralBrackets:
  Enabled: false

# This interferes with RSpec change macro.
Lint/AmbiguousBlockAssociation:
  Enabled: false

# This is a rare mistake that may've been more prevalent in junior teams when
# ruby was young. Nowadays, if you see :true or :false, it's on purpose.
# Otherwise, we'll let code reviews handle it.
Lint/BooleanSymbol:
  Enabled: false

# This can be useful when employed carefully under spec, which is the only place
# global state is set within blocks in the app.
Lint/ConstantDefinitionInBlock:
  Enabled: false

# This can be a source of needless misdirection if, for example, the parent
# class doesn't implement a constructor, and there is a call to super() in the
# child class' constructor.
Lint/MissingSuper:
  Enabled: false

# This is meant to catch array literals that get splatted. However, in some
# cases that actually helps readability.
#
# For example:
#
#   system({ 'ENV_VAR' => 'foo' }, *%W[command arg1 --opt1 #{value} --opt2])
#
# Since system call requires individual arguments for escaped command, it's more
# readable to wrap it in a %W[].
Lint/RedundantSplatExpansion:
  Enabled: false

# Sometimes method arguments serve as documentation and we want to keep them.
Lint/UnusedMethodArgument:
  Enabled: false

# The downside of this cop is that it encourages speculative architecture.
# It asks to split a big imperative routine into a few smaller ones. While that
# may or may not be correct, it's often best to postpone making that judgement
# call until we gather more information. It's much easier to come back and
# refactor a single routine, than to unroll many wrongly-extracted methods that
# each may have become dependencies for other things.
Metrics/AbcSize:
  Enabled: false

# For rationale see Metrics/AbcSize
Metrics/BlockLength:
  Enabled: false

# Just like in Metrics/AbcSize, long classes should not be considered
# problematic based solely on length factor. A long class is a small offense
# when it represents the correct abstraction. It lends itself to refactoring
# better than multiple short, but wrongly-extracted classes.
Metrics/ClassLength:
  Enabled: false

# For rationale see Metrics/AbcSize
Metrics/CyclomaticComplexity:
  Enabled: false

# For rationale see Metrics/AbcSize
Metrics/MethodLength:
  Enabled: false

# For rationale see Metrics/ClassLength
Metrics/ModuleLength:
  Enabled: false

# We apply a lesson learned from functional programming that encourages simple
# data to be passed between functions. This may result in longer lists of
# arguments. As long as these arguments are named, we don't impose a limit.
Metrics/ParameterLists:
  CountKeywordArgs: false

# For rationale see Metrics/AbcSize
Metrics/PerceivedComplexity:
  Enabled: false

# While this is a good cop in principle, it cannot tell the difference between a
# reader/writer and something that gets/sets a value via a 3rd party API. In
# such cases a verb helps reveal a complex, error-prone operation hiding within.
# Such operations are commonly found in private methods of http clients.
Naming/AccessorMethodName:
  Enabled: false

# While is_ methods are often wrong, have_/has_ methods can make sense in more
# compound objects. By default this cop prohibits have_/has_, which is why we
# reconfigure the blocklist.
Naming/PredicateName:
  ForbiddenPrefixes:
    - is_

Naming/BlockParameterName:
  AllowedNames:
    - i # enumerable index

Naming/MethodParameterName:
  AllowedNames:
    - ad # advertisement
    - c # config
    - e # exception

# In retrospect, we probably should've always created tables with timestamps.
# Let's ensure this going forward.
Rails/CreateTableWithTimestamps:
  Exclude:
    - db/migrate/2017*.rb

# We want to enforce better query methods across the entire codebase, not just
# in models.
Rails/FindBy:
  Include:
    - app/**/*.rb
    - config/**/*.rb
    - lib/**/*.rb
    - lib/**/*.rake

# For rationale see Rails/FindBy
Rails/FindEach:
  Include:
    - app/**/*.rb
    - config/**/*.rb
    - lib/**/*.rb
    - lib/**/*.rake

# We sometimes use inquiry to give us flexibility to compare different values
# in different places without having to write all single conditions every time.
Rails/Inquiry:
  Enabled: false

Rails/Output:
  Exclude:
    - db/seeds/**/*.rb # ok to use puts, since usually runs in a terminal
    - lib/**/*.rake # see above
    - lib/**/*.rb # ok to use puts, since could be a future rails-agnostic gem

# All of our html_safe usage is deliberate. Instead of polluting code with
# rubocop exceptions we opt to be mindful of this in code reviews.
Rails/OutputSafety:
  Enabled: false

# We want to make it explicit in all future migrations whether they're
# reversible or not. The past ones we will have to ignore.
Rails/ReversibleMigration:
  Exclude:
    - db/migrate/2017*.rb
    - db/migrate/20180*.rb # up to October

# Instead of relying on the use of rails validations, we should be setting up db
# constraints. Validations are for users, constraints are for code.
Rails/SkipsModelValidations:
  Enabled: false

Rails/UnknownEnv:
  Environments:
    - development
    - test
    - staging
    - production

# Disabling this because it errors on changing visibility of existing methods.
# More detail: https://github.com/rubocop-hq/rubocop/issues/5953
Style/AccessModifierDeclarations:
  Enabled: false

# We don't mind either alias or alias_method, however the cop seems broken,
# since it complains when alias is used with question marks.
Style/Alias:
  Enabled: false

# And/or have lower precedence than &&/||. Instead of always enforcing one, we
# decide which one makes sense on a case-by-case basis.
Style/AndOr:
  Enabled: false

# We want to use EnforcedStyle: semantic. Rationale is at
# https://github.com/rubocop-hq/ruby-style-guide/issues/162
# Problem is, rubocop's detection of functional calls doesn't work too well,
# e.g. when it's the last call in a method, so we disable it.
Style/BlockDelimiters:
  Enabled: false

# While it's a good idea to avoid using === (case equality) for no good reason,
# sometimes there is a very good reason to use it. A function could be expecting
# a flexible matcher that is matched like a case statement.
Style/CaseEquality:
  Enabled: false

# While it's true that it's almost always better to use class ivar than class
# var, we opt to leave it up to the developer to decide.
Style/ClassVars:
  Enabled: false

# We want this, but it's disabled by default.
Style/CollectionMethods:
  Enabled: true

# Currently we are not planning to be writing class documentation in comments.
Style/Documentation:
  Enabled: false

# The argument for this cop is that !! is cryptic. It's been idiomatic for a
# long time and this team does not find it cryptic.
Style/DoubleNegation:
  Enabled: false

# Explicit blocks are hard to name and they're less performant than implicit
# blocks.
Style/ExplicitBlockArgument:
  Enabled: false

# Ruby's string format features are useful, and can help clean things up:
#
#   format('%s', 'foo') for unannotated,
#   format('%<word>s', word: 'foo') for annotated with formatting
#   format('%{word}', word: 'foo') for annotated without formatting
#
# However, we don't want to enforce the use of either of them. They each have
# their place based on programmer's discretion.
Style/FormatStringToken:
  Enabled: false

# We are not in a rush to upgrade to Ruby 3 at this moment.
Style/FrozenStringLiteralComment:
  Enabled: false

# This doesn't seem to provide an obvious benefit--it allows unneeded flexbility
# by allowing the global variables to be reassigned.
Style/GlobalStdStream:
  Enabled: false

Style/GlobalVars:
  Exclude:
    - spec/**/*.rb

# Guard clauses are good, but this cop goes overboard. For example, it enforces
# all raise calls to have an appended condition instead of a wrapped around one.
Style/GuardClause:
  Enabled: false

# This is better decided by the readability judgement of a human.
Style/HashAsLastArrayItem:
  Enabled: false

Style/HashSyntax:
  Exclude:
    - lib/**/*.rake # Hashrockets help vividly indicate dependencies in rake.

# Sticking with -> (literal) style of lambda because making one-line vs
# multi-line distinction is not useful.
Style/Lambda:
  EnforcedStyle: literal

# There is no good reason to prohibit usage of lambda.() at programmer's
# discretion.
Style/LambdaCall:
  Enabled: false

# Given our choice of semantic block delimiters, we want to ensure there is
# never a call chained to a do/end block, since that automatically makes the
# block be about its return value, which is when we should use braces instead.
Style/MethodCalledOnDoEndBlock:
  Enabled: true
  Exclude:
    - spec/**/*_spec.rb # we allow expect do...end usage in specs

# For long arg lists we want to be able to define methods like this:
#
# def initialize \
#   foo: 'foo',
#   bar: 'bar'
Style/MethodDefParentheses:
  Enabled: false

# We want to be able to write:
# foo ?
#   bar :
#   baz
Style/MultilineTernaryOperator:
  Enabled: false

# We want to decide case-by-case whether to use `if !foo` or `unless foo`.
# In some cases readability improves with extra negation.
Style/NegatedIf:
  Enabled: false

# We gave this a shot, separating various integers with underscores (123_456)
# but in practice this proved to be more distracting than helpful.
Style/NumericLiterals:
  Enabled: false

# It's perfectly readable to have an argument with a boolean default--disabling
# this also allows us to pass args that accept multiple types, a mix of booleans
# and symbols, e.g.
Style/OptionalBooleanParameter:
  Enabled: false

# Ruby devs are familiar with Perl backrefs, they don't make code less readable.
Style/PerlBackrefs:
  Enabled: false

# Semicolon usage can be clean/readable when used correctly.
# Example (rspec): before { user.subscriber.destroy; user.reload }
Style/Semicolon:
  Enabled: false

# Some single-line methods can be more readable due to their table-like form,
# therefore we don't want to forbid them.
#
# Example:
#
#     def jfk; @jfk ||= create_airport('JFK', 'New York') end
#     def svo; @svo ||= create_airport('SVO', 'Moscow')   end
#     def nbo; @nbo ||= create_airport('NBO', 'Nairobi')  end
#     def sgn; @sgn ||= create_airport('SGN', 'Saigon')   end
Style/SingleLineMethods:
  Enabled: false

# Enforcing this globally means we'll squelch TypeErrors that could help us
# avoid certain kinds of bugs when constructing strings.
Style/StringConcatenation:
  Enabled: false

# There are way more symbol arrays of size 2 than of size 3. They aren't hard to
# read at size 2, no reason to enforce %i[] notation there.
Style/SymbolArray:
  MinSize: 3

Style/SymbolProc:
  IgnoredMethods:
    - column # loses readability as column(foo, &:bar)
    - create_table # highly uncommon: create_table(:foos, &:timestamps)

# In case statements, `when 1; 'foo'` can be just as descriptive (yet shorter)
# as `when 1 then foo`. Leaving this decision up to the programmer.
Style/WhenThen:
  Enabled: false

# For rationale see Style/SymbolArray
Style/WordArray:
  MinSize: 3
